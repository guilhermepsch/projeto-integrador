name: pi

services:
  backend:
    build: 
      context: server
      target: dev
    depends_on:
      database:
        condition: service_healthy
    links:
      - database
    container_name: backend
    volumes:
      - ./server:/usr/src/app
      - backend_node_modules:/usr/src/app/node_modules
    ports:
      - "${SERVERPORT}:${SERVERPORT}"
    environment:
      - SERVERPORT=${SERVERPORT}
    entrypoint: npm run start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVERPORT}"]
      interval: 10s
      timeout: 5s
      retries: 10

  frontend:
    build: 
      context: web
      target: dev
    depends_on:
      backend:
        condition: service_healthy
    links:
      - backend
    container_name: frontend
    volumes:
      - ./web:/usr/src/app
      - frontend_node_modules:/usr/src/app/node_modules
    ports:
      - "${WEBPORT}:${WEBPORT}"
    environment:
      - WEBPORT=${WEBPORT}
    entrypoint: npm run dev

  database:
    image: postgres:12.2
    container_name: database
    ports:
      - "${DBPORT}:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  backend_node_modules:
  frontend_node_modules:
